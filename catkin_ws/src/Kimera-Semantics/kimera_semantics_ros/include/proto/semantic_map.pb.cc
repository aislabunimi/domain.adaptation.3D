// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: semantic_map.proto

#include "semantic_map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_semantic_5fmap_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_semantic_5fmap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SemanticMapProto_SemanticBlockProto_OriginProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_semantic_5fmap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_semantic_5fmap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SemanticMapProto_SemanticBlockProto_SemanticVoxelProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_semantic_5fmap_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SemanticMapProto_SemanticBlockProto;
}  // namespace protobuf_semantic_5fmap_2eproto
namespace kimera {
class SemanticMapProto_SemanticBlockProto_OriginProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SemanticMapProto_SemanticBlockProto_OriginProto>
      _instance;
} _SemanticMapProto_SemanticBlockProto_OriginProto_default_instance_;
class SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto>
      _instance;
} _SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto_default_instance_;
class SemanticMapProto_SemanticBlockProto_SemanticVoxelProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SemanticMapProto_SemanticBlockProto_SemanticVoxelProto>
      _instance;
} _SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_default_instance_;
class SemanticMapProto_SemanticBlockProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SemanticMapProto_SemanticBlockProto>
      _instance;
} _SemanticMapProto_SemanticBlockProto_default_instance_;
class SemanticMapProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SemanticMapProto>
      _instance;
} _SemanticMapProto_default_instance_;
}  // namespace kimera
namespace protobuf_semantic_5fmap_2eproto {
static void InitDefaultsSemanticMapProto_SemanticBlockProto_OriginProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kimera::_SemanticMapProto_SemanticBlockProto_OriginProto_default_instance_;
    new (ptr) ::kimera::SemanticMapProto_SemanticBlockProto_OriginProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kimera::SemanticMapProto_SemanticBlockProto_OriginProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SemanticMapProto_SemanticBlockProto_OriginProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSemanticMapProto_SemanticBlockProto_OriginProto}, {}};

static void InitDefaultsSemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kimera::_SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto_default_instance_;
    new (ptr) ::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto}, {}};

static void InitDefaultsSemanticMapProto_SemanticBlockProto_SemanticVoxelProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kimera::_SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_default_instance_;
    new (ptr) ::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SemanticMapProto_SemanticBlockProto_SemanticVoxelProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSemanticMapProto_SemanticBlockProto_SemanticVoxelProto}, {
      &protobuf_semantic_5fmap_2eproto::scc_info_SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto.base,}};

static void InitDefaultsSemanticMapProto_SemanticBlockProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kimera::_SemanticMapProto_SemanticBlockProto_default_instance_;
    new (ptr) ::kimera::SemanticMapProto_SemanticBlockProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kimera::SemanticMapProto_SemanticBlockProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SemanticMapProto_SemanticBlockProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSemanticMapProto_SemanticBlockProto}, {
      &protobuf_semantic_5fmap_2eproto::scc_info_SemanticMapProto_SemanticBlockProto_OriginProto.base,
      &protobuf_semantic_5fmap_2eproto::scc_info_SemanticMapProto_SemanticBlockProto_SemanticVoxelProto.base,}};

static void InitDefaultsSemanticMapProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kimera::_SemanticMapProto_default_instance_;
    new (ptr) ::kimera::SemanticMapProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kimera::SemanticMapProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SemanticMapProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSemanticMapProto}, {
      &protobuf_semantic_5fmap_2eproto::scc_info_SemanticMapProto_SemanticBlockProto.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SemanticMapProto_SemanticBlockProto_OriginProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SemanticMapProto_SemanticBlockProto_SemanticVoxelProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SemanticMapProto_SemanticBlockProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SemanticMapProto.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto_SemanticBlockProto_OriginProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto_SemanticBlockProto_OriginProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto_SemanticBlockProto_OriginProto, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto_SemanticBlockProto_OriginProto, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto_SemanticBlockProto_OriginProto, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto, r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto, g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto, b_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto, semantic_labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto, linear_index_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto_SemanticBlockProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto_SemanticBlockProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto_SemanticBlockProto, voxels_per_side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto_SemanticBlockProto, voxel_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto_SemanticBlockProto, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto_SemanticBlockProto, semantic_voxels_),
  2,
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kimera::SemanticMapProto, semantic_blocks_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::kimera::SemanticMapProto_SemanticBlockProto_OriginProto)},
  { 11, 19, sizeof(::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto)},
  { 22, 30, sizeof(::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto)},
  { 33, 42, sizeof(::kimera::SemanticMapProto_SemanticBlockProto)},
  { 46, 52, sizeof(::kimera::SemanticMapProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::kimera::_SemanticMapProto_SemanticBlockProto_OriginProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kimera::_SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kimera::_SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kimera::_SemanticMapProto_SemanticBlockProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kimera::_SemanticMapProto_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "semantic_map.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022semantic_map.proto\022\006kimera\"\275\004\n\020Semanti"
      "cMapProto\022D\n\017semantic_blocks\030\001 \003(\0132+.kim"
      "era.SemanticMapProto.SemanticBlockProto\032"
      "\342\003\n\022SemanticBlockProto\022\027\n\017voxels_per_sid"
      "e\030\001 \001(\005\022\022\n\nvoxel_size\030\002 \001(\001\022G\n\006origin\030\003 "
      "\001(\01327.kimera.SemanticMapProto.SemanticBl"
      "ockProto.OriginProto\022W\n\017semantic_voxels\030"
      "\004 \003(\0132>.kimera.SemanticMapProto.Semantic"
      "BlockProto.SemanticVoxelProto\032.\n\013OriginP"
      "roto\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\032\314\001"
      "\n\022SemanticVoxelProto\022X\n\005color\030\001 \001(\0132I.ki"
      "mera.SemanticMapProto.SemanticBlockProto"
      ".SemanticVoxelProto.ColorProto\022\027\n\017semant"
      "ic_labels\030\002 \003(\002\022\024\n\014linear_index\030\003 \001(\005\032-\n"
      "\nColorProto\022\t\n\001r\030\001 \001(\005\022\t\n\001g\030\002 \001(\005\022\t\n\001b\030\003"
      " \001(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 604);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "semantic_map.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_semantic_5fmap_2eproto
namespace kimera {

// ===================================================================

void SemanticMapProto_SemanticBlockProto_OriginProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SemanticMapProto_SemanticBlockProto_OriginProto::kXFieldNumber;
const int SemanticMapProto_SemanticBlockProto_OriginProto::kYFieldNumber;
const int SemanticMapProto_SemanticBlockProto_OriginProto::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SemanticMapProto_SemanticBlockProto_OriginProto::SemanticMapProto_SemanticBlockProto_OriginProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_semantic_5fmap_2eproto::scc_info_SemanticMapProto_SemanticBlockProto_OriginProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:kimera.SemanticMapProto.SemanticBlockProto.OriginProto)
}
SemanticMapProto_SemanticBlockProto_OriginProto::SemanticMapProto_SemanticBlockProto_OriginProto(const SemanticMapProto_SemanticBlockProto_OriginProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:kimera.SemanticMapProto.SemanticBlockProto.OriginProto)
}

void SemanticMapProto_SemanticBlockProto_OriginProto::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

SemanticMapProto_SemanticBlockProto_OriginProto::~SemanticMapProto_SemanticBlockProto_OriginProto() {
  // @@protoc_insertion_point(destructor:kimera.SemanticMapProto.SemanticBlockProto.OriginProto)
  SharedDtor();
}

void SemanticMapProto_SemanticBlockProto_OriginProto::SharedDtor() {
}

void SemanticMapProto_SemanticBlockProto_OriginProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SemanticMapProto_SemanticBlockProto_OriginProto::descriptor() {
  ::protobuf_semantic_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semantic_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SemanticMapProto_SemanticBlockProto_OriginProto& SemanticMapProto_SemanticBlockProto_OriginProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_semantic_5fmap_2eproto::scc_info_SemanticMapProto_SemanticBlockProto_OriginProto.base);
  return *internal_default_instance();
}


void SemanticMapProto_SemanticBlockProto_OriginProto::Clear() {
// @@protoc_insertion_point(message_clear_start:kimera.SemanticMapProto.SemanticBlockProto.OriginProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SemanticMapProto_SemanticBlockProto_OriginProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kimera.SemanticMapProto.SemanticBlockProto.OriginProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kimera.SemanticMapProto.SemanticBlockProto.OriginProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kimera.SemanticMapProto.SemanticBlockProto.OriginProto)
  return false;
#undef DO_
}

void SemanticMapProto_SemanticBlockProto_OriginProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kimera.SemanticMapProto.SemanticBlockProto.OriginProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kimera.SemanticMapProto.SemanticBlockProto.OriginProto)
}

::google::protobuf::uint8* SemanticMapProto_SemanticBlockProto_OriginProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kimera.SemanticMapProto.SemanticBlockProto.OriginProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kimera.SemanticMapProto.SemanticBlockProto.OriginProto)
  return target;
}

size_t SemanticMapProto_SemanticBlockProto_OriginProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kimera.SemanticMapProto.SemanticBlockProto.OriginProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SemanticMapProto_SemanticBlockProto_OriginProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kimera.SemanticMapProto.SemanticBlockProto.OriginProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SemanticMapProto_SemanticBlockProto_OriginProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SemanticMapProto_SemanticBlockProto_OriginProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kimera.SemanticMapProto.SemanticBlockProto.OriginProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kimera.SemanticMapProto.SemanticBlockProto.OriginProto)
    MergeFrom(*source);
  }
}

void SemanticMapProto_SemanticBlockProto_OriginProto::MergeFrom(const SemanticMapProto_SemanticBlockProto_OriginProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kimera.SemanticMapProto.SemanticBlockProto.OriginProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SemanticMapProto_SemanticBlockProto_OriginProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kimera.SemanticMapProto.SemanticBlockProto.OriginProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SemanticMapProto_SemanticBlockProto_OriginProto::CopyFrom(const SemanticMapProto_SemanticBlockProto_OriginProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kimera.SemanticMapProto.SemanticBlockProto.OriginProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SemanticMapProto_SemanticBlockProto_OriginProto::IsInitialized() const {
  return true;
}

void SemanticMapProto_SemanticBlockProto_OriginProto::Swap(SemanticMapProto_SemanticBlockProto_OriginProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SemanticMapProto_SemanticBlockProto_OriginProto::InternalSwap(SemanticMapProto_SemanticBlockProto_OriginProto* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SemanticMapProto_SemanticBlockProto_OriginProto::GetMetadata() const {
  protobuf_semantic_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semantic_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::kRFieldNumber;
const int SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::kGFieldNumber;
const int SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::kBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_semantic_5fmap_2eproto::scc_info_SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto.ColorProto)
}
SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto(const SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&r_)) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto.ColorProto)
}

void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::SharedCtor() {
  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&r_)) + sizeof(b_));
}

SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::~SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto() {
  // @@protoc_insertion_point(destructor:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto.ColorProto)
  SharedDtor();
}

void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::SharedDtor() {
}

void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::descriptor() {
  ::protobuf_semantic_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semantic_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto& SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_semantic_5fmap_2eproto::scc_info_SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto.base);
  return *internal_default_instance();
}


void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto.ColorProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&r_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&b_) -
        reinterpret_cast<char*>(&r_)) + sizeof(b_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto.ColorProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 r = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 g = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_g();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 b = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto.ColorProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto.ColorProto)
  return false;
#undef DO_
}

void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto.ColorProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 r = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->r(), output);
  }

  // optional int32 g = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->g(), output);
  }

  // optional int32 b = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->b(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto.ColorProto)
}

::google::protobuf::uint8* SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto.ColorProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 r = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->r(), target);
  }

  // optional int32 g = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->g(), target);
  }

  // optional int32 b = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->b(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto.ColorProto)
  return target;
}

size_t SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto.ColorProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 r = 1;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->r());
    }

    // optional int32 g = 2;
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g());
    }

    // optional int32 b = 3;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto.ColorProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto.ColorProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto.ColorProto)
    MergeFrom(*source);
  }
}

void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::MergeFrom(const SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto.ColorProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00000002u) {
      g_ = from.g_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_ = from.b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto.ColorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::CopyFrom(const SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto.ColorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::IsInitialized() const {
  return true;
}

void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::Swap(SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::InternalSwap(SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto* other) {
  using std::swap;
  swap(r_, other->r_);
  swap(g_, other->g_);
  swap(b_, other->b_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::GetMetadata() const {
  protobuf_semantic_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semantic_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::InitAsDefaultInstance() {
  ::kimera::_SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_default_instance_._instance.get_mutable()->color_ = const_cast< ::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto*>(
      ::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::kColorFieldNumber;
const int SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::kSemanticLabelsFieldNumber;
const int SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::kLinearIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_semantic_5fmap_2eproto::scc_info_SemanticMapProto_SemanticBlockProto_SemanticVoxelProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto)
}
SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto(const SemanticMapProto_SemanticBlockProto_SemanticVoxelProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      semantic_labels_(from.semantic_labels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_color()) {
    color_ = new ::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto(*from.color_);
  } else {
    color_ = NULL;
  }
  linear_index_ = from.linear_index_;
  // @@protoc_insertion_point(copy_constructor:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto)
}

void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::SharedCtor() {
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&linear_index_) -
      reinterpret_cast<char*>(&color_)) + sizeof(linear_index_));
}

SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::~SemanticMapProto_SemanticBlockProto_SemanticVoxelProto() {
  // @@protoc_insertion_point(destructor:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto)
  SharedDtor();
}

void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::SharedDtor() {
  if (this != internal_default_instance()) delete color_;
}

void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::descriptor() {
  ::protobuf_semantic_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semantic_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SemanticMapProto_SemanticBlockProto_SemanticVoxelProto& SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_semantic_5fmap_2eproto::scc_info_SemanticMapProto_SemanticBlockProto_SemanticVoxelProto.base);
  return *internal_default_instance();
}


void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::Clear() {
// @@protoc_insertion_point(message_clear_start:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  semantic_labels_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(color_ != NULL);
    color_->Clear();
  }
  linear_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto.ColorProto color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float semantic_labels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_semantic_labels())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_semantic_labels())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 linear_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_linear_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linear_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto)
  return false;
#undef DO_
}

void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto.ColorProto color = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_color(), output);
  }

  // repeated float semantic_labels = 2;
  for (int i = 0, n = this->semantic_labels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->semantic_labels(i), output);
  }

  // optional int32 linear_index = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->linear_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto)
}

::google::protobuf::uint8* SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto.ColorProto color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_color(), deterministic, target);
  }

  // repeated float semantic_labels = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(2, this->semantic_labels_, target);

  // optional int32 linear_index = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->linear_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto)
  return target;
}

size_t SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float semantic_labels = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->semantic_labels_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->semantic_labels_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto.ColorProto color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *color_);
    }

    // optional int32 linear_index = 3;
    if (has_linear_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linear_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SemanticMapProto_SemanticBlockProto_SemanticVoxelProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SemanticMapProto_SemanticBlockProto_SemanticVoxelProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto)
    MergeFrom(*source);
  }
}

void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::MergeFrom(const SemanticMapProto_SemanticBlockProto_SemanticVoxelProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  semantic_labels_.MergeFrom(from.semantic_labels_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_color()->::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto::MergeFrom(from.color());
    }
    if (cached_has_bits & 0x00000002u) {
      linear_index_ = from.linear_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::CopyFrom(const SemanticMapProto_SemanticBlockProto_SemanticVoxelProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::IsInitialized() const {
  return true;
}

void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::Swap(SemanticMapProto_SemanticBlockProto_SemanticVoxelProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::InternalSwap(SemanticMapProto_SemanticBlockProto_SemanticVoxelProto* other) {
  using std::swap;
  semantic_labels_.InternalSwap(&other->semantic_labels_);
  swap(color_, other->color_);
  swap(linear_index_, other->linear_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SemanticMapProto_SemanticBlockProto_SemanticVoxelProto::GetMetadata() const {
  protobuf_semantic_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semantic_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SemanticMapProto_SemanticBlockProto::InitAsDefaultInstance() {
  ::kimera::_SemanticMapProto_SemanticBlockProto_default_instance_._instance.get_mutable()->origin_ = const_cast< ::kimera::SemanticMapProto_SemanticBlockProto_OriginProto*>(
      ::kimera::SemanticMapProto_SemanticBlockProto_OriginProto::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SemanticMapProto_SemanticBlockProto::kVoxelsPerSideFieldNumber;
const int SemanticMapProto_SemanticBlockProto::kVoxelSizeFieldNumber;
const int SemanticMapProto_SemanticBlockProto::kOriginFieldNumber;
const int SemanticMapProto_SemanticBlockProto::kSemanticVoxelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SemanticMapProto_SemanticBlockProto::SemanticMapProto_SemanticBlockProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_semantic_5fmap_2eproto::scc_info_SemanticMapProto_SemanticBlockProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:kimera.SemanticMapProto.SemanticBlockProto)
}
SemanticMapProto_SemanticBlockProto::SemanticMapProto_SemanticBlockProto(const SemanticMapProto_SemanticBlockProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      semantic_voxels_(from.semantic_voxels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::kimera::SemanticMapProto_SemanticBlockProto_OriginProto(*from.origin_);
  } else {
    origin_ = NULL;
  }
  ::memcpy(&voxel_size_, &from.voxel_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&voxels_per_side_) -
    reinterpret_cast<char*>(&voxel_size_)) + sizeof(voxels_per_side_));
  // @@protoc_insertion_point(copy_constructor:kimera.SemanticMapProto.SemanticBlockProto)
}

void SemanticMapProto_SemanticBlockProto::SharedCtor() {
  ::memset(&origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voxels_per_side_) -
      reinterpret_cast<char*>(&origin_)) + sizeof(voxels_per_side_));
}

SemanticMapProto_SemanticBlockProto::~SemanticMapProto_SemanticBlockProto() {
  // @@protoc_insertion_point(destructor:kimera.SemanticMapProto.SemanticBlockProto)
  SharedDtor();
}

void SemanticMapProto_SemanticBlockProto::SharedDtor() {
  if (this != internal_default_instance()) delete origin_;
}

void SemanticMapProto_SemanticBlockProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SemanticMapProto_SemanticBlockProto::descriptor() {
  ::protobuf_semantic_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semantic_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SemanticMapProto_SemanticBlockProto& SemanticMapProto_SemanticBlockProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_semantic_5fmap_2eproto::scc_info_SemanticMapProto_SemanticBlockProto.base);
  return *internal_default_instance();
}


void SemanticMapProto_SemanticBlockProto::Clear() {
// @@protoc_insertion_point(message_clear_start:kimera.SemanticMapProto.SemanticBlockProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  semantic_voxels_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(origin_ != NULL);
    origin_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&voxel_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&voxels_per_side_) -
        reinterpret_cast<char*>(&voxel_size_)) + sizeof(voxels_per_side_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SemanticMapProto_SemanticBlockProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kimera.SemanticMapProto.SemanticBlockProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 voxels_per_side = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_voxels_per_side();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voxels_per_side_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double voxel_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_voxel_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &voxel_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kimera.SemanticMapProto.SemanticBlockProto.OriginProto origin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto semantic_voxels = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_semantic_voxels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kimera.SemanticMapProto.SemanticBlockProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kimera.SemanticMapProto.SemanticBlockProto)
  return false;
#undef DO_
}

void SemanticMapProto_SemanticBlockProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kimera.SemanticMapProto.SemanticBlockProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 voxels_per_side = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->voxels_per_side(), output);
  }

  // optional double voxel_size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->voxel_size(), output);
  }

  // optional .kimera.SemanticMapProto.SemanticBlockProto.OriginProto origin = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_origin(), output);
  }

  // repeated .kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto semantic_voxels = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->semantic_voxels_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->semantic_voxels(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kimera.SemanticMapProto.SemanticBlockProto)
}

::google::protobuf::uint8* SemanticMapProto_SemanticBlockProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kimera.SemanticMapProto.SemanticBlockProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 voxels_per_side = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->voxels_per_side(), target);
  }

  // optional double voxel_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->voxel_size(), target);
  }

  // optional .kimera.SemanticMapProto.SemanticBlockProto.OriginProto origin = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_origin(), deterministic, target);
  }

  // repeated .kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto semantic_voxels = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->semantic_voxels_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->semantic_voxels(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kimera.SemanticMapProto.SemanticBlockProto)
  return target;
}

size_t SemanticMapProto_SemanticBlockProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kimera.SemanticMapProto.SemanticBlockProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .kimera.SemanticMapProto.SemanticBlockProto.SemanticVoxelProto semantic_voxels = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->semantic_voxels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->semantic_voxels(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .kimera.SemanticMapProto.SemanticBlockProto.OriginProto origin = 3;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *origin_);
    }

    // optional double voxel_size = 2;
    if (has_voxel_size()) {
      total_size += 1 + 8;
    }

    // optional int32 voxels_per_side = 1;
    if (has_voxels_per_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->voxels_per_side());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SemanticMapProto_SemanticBlockProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kimera.SemanticMapProto.SemanticBlockProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SemanticMapProto_SemanticBlockProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SemanticMapProto_SemanticBlockProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kimera.SemanticMapProto.SemanticBlockProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kimera.SemanticMapProto.SemanticBlockProto)
    MergeFrom(*source);
  }
}

void SemanticMapProto_SemanticBlockProto::MergeFrom(const SemanticMapProto_SemanticBlockProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kimera.SemanticMapProto.SemanticBlockProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  semantic_voxels_.MergeFrom(from.semantic_voxels_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::kimera::SemanticMapProto_SemanticBlockProto_OriginProto::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      voxel_size_ = from.voxel_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      voxels_per_side_ = from.voxels_per_side_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SemanticMapProto_SemanticBlockProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kimera.SemanticMapProto.SemanticBlockProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SemanticMapProto_SemanticBlockProto::CopyFrom(const SemanticMapProto_SemanticBlockProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kimera.SemanticMapProto.SemanticBlockProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SemanticMapProto_SemanticBlockProto::IsInitialized() const {
  return true;
}

void SemanticMapProto_SemanticBlockProto::Swap(SemanticMapProto_SemanticBlockProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SemanticMapProto_SemanticBlockProto::InternalSwap(SemanticMapProto_SemanticBlockProto* other) {
  using std::swap;
  CastToBase(&semantic_voxels_)->InternalSwap(CastToBase(&other->semantic_voxels_));
  swap(origin_, other->origin_);
  swap(voxel_size_, other->voxel_size_);
  swap(voxels_per_side_, other->voxels_per_side_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SemanticMapProto_SemanticBlockProto::GetMetadata() const {
  protobuf_semantic_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semantic_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SemanticMapProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SemanticMapProto::kSemanticBlocksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SemanticMapProto::SemanticMapProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_semantic_5fmap_2eproto::scc_info_SemanticMapProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:kimera.SemanticMapProto)
}
SemanticMapProto::SemanticMapProto(const SemanticMapProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      semantic_blocks_(from.semantic_blocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kimera.SemanticMapProto)
}

void SemanticMapProto::SharedCtor() {
}

SemanticMapProto::~SemanticMapProto() {
  // @@protoc_insertion_point(destructor:kimera.SemanticMapProto)
  SharedDtor();
}

void SemanticMapProto::SharedDtor() {
}

void SemanticMapProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SemanticMapProto::descriptor() {
  ::protobuf_semantic_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semantic_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SemanticMapProto& SemanticMapProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_semantic_5fmap_2eproto::scc_info_SemanticMapProto.base);
  return *internal_default_instance();
}


void SemanticMapProto::Clear() {
// @@protoc_insertion_point(message_clear_start:kimera.SemanticMapProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  semantic_blocks_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SemanticMapProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kimera.SemanticMapProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kimera.SemanticMapProto.SemanticBlockProto semantic_blocks = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_semantic_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kimera.SemanticMapProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kimera.SemanticMapProto)
  return false;
#undef DO_
}

void SemanticMapProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kimera.SemanticMapProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kimera.SemanticMapProto.SemanticBlockProto semantic_blocks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->semantic_blocks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->semantic_blocks(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kimera.SemanticMapProto)
}

::google::protobuf::uint8* SemanticMapProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kimera.SemanticMapProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kimera.SemanticMapProto.SemanticBlockProto semantic_blocks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->semantic_blocks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->semantic_blocks(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kimera.SemanticMapProto)
  return target;
}

size_t SemanticMapProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kimera.SemanticMapProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .kimera.SemanticMapProto.SemanticBlockProto semantic_blocks = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->semantic_blocks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->semantic_blocks(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SemanticMapProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kimera.SemanticMapProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SemanticMapProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SemanticMapProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kimera.SemanticMapProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kimera.SemanticMapProto)
    MergeFrom(*source);
  }
}

void SemanticMapProto::MergeFrom(const SemanticMapProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kimera.SemanticMapProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  semantic_blocks_.MergeFrom(from.semantic_blocks_);
}

void SemanticMapProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kimera.SemanticMapProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SemanticMapProto::CopyFrom(const SemanticMapProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kimera.SemanticMapProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SemanticMapProto::IsInitialized() const {
  return true;
}

void SemanticMapProto::Swap(SemanticMapProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SemanticMapProto::InternalSwap(SemanticMapProto* other) {
  using std::swap;
  CastToBase(&semantic_blocks_)->InternalSwap(CastToBase(&other->semantic_blocks_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SemanticMapProto::GetMetadata() const {
  protobuf_semantic_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semantic_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace kimera
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kimera::SemanticMapProto_SemanticBlockProto_OriginProto* Arena::CreateMaybeMessage< ::kimera::SemanticMapProto_SemanticBlockProto_OriginProto >(Arena* arena) {
  return Arena::CreateInternal< ::kimera::SemanticMapProto_SemanticBlockProto_OriginProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto* Arena::CreateMaybeMessage< ::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto >(Arena* arena) {
  return Arena::CreateInternal< ::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto_ColorProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto* Arena::CreateMaybeMessage< ::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto >(Arena* arena) {
  return Arena::CreateInternal< ::kimera::SemanticMapProto_SemanticBlockProto_SemanticVoxelProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kimera::SemanticMapProto_SemanticBlockProto* Arena::CreateMaybeMessage< ::kimera::SemanticMapProto_SemanticBlockProto >(Arena* arena) {
  return Arena::CreateInternal< ::kimera::SemanticMapProto_SemanticBlockProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kimera::SemanticMapProto* Arena::CreateMaybeMessage< ::kimera::SemanticMapProto >(Arena* arena) {
  return Arena::CreateInternal< ::kimera::SemanticMapProto >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
